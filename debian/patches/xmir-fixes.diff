--- a/hw/xmir/xmir-glamor.c
+++ b/hw/xmir/xmir-glamor.c
@@ -245,11 +245,6 @@ xmir_glamor_copy_egl_tex(int fbo, Drawab
     glVertexAttribPointer(GLAMOR_VERTEX_SOURCE, 2, GL_FLOAT, GL_FALSE,
                           2 * sizeof(float), texcoords);
     glEnableVertexAttribArray(GLAMOR_VERTEX_SOURCE);
-    if (!fbo) {
-        glUseProgram(glamor_priv->finish_access_prog[0]);
-        glUniform1i(glamor_priv->finish_access_revert[0], REVERT_NONE);
-        glUniform1i(glamor_priv->finish_access_swap_rb[0], SWAP_NONE_UPLOADING);
-    }
 
     if (!swap_xy) {
         float _tx1, _tx2, _ty1, _ty2;
@@ -606,7 +601,6 @@ xmir_glamor_copy_egl_queue(struct xmir_s
          * rotating back and forth.
          */
         glamor_set_pixmap_type(src_pixmap, GLAMOR_TEXTURE_DRM);
-        src_pixmap_priv->fbo->external = TRUE;
 
         xmir_win->image = eglCreateImageKHR(xmir_screen->egl_display, xmir_screen->egl_context, EGL_GL_TEXTURE_2D_KHR, (EGLClientBuffer)(intptr_t)src_pixmap_priv->fbo->tex, attribs);
         if (!xmir_win->image) {
@@ -925,12 +919,6 @@ xmir_glamor_fini(struct xmir_screen *xmi
     free(xmir_screen->device_name);
 }
 
-void
-glamor_egl_destroy_textured_pixmap(PixmapPtr pixmap)
-{
-    glamor_destroy_textured_pixmap(pixmap);
-}
-
 static void
 xmir_glamor_get_name_from_bo(int drm_fd, struct gbm_bo *bo, int *name)
 {
@@ -1019,12 +1007,6 @@ glamor_egl_dri3_fd_name_from_tex(ScreenP
     return fd;
 }
 
-unsigned int
-glamor_egl_create_argb8888_based_texture(ScreenPtr screen, int w, int h, Bool linear)
-{
-    return 0;
-}
-
 static PixmapPtr
 xmir_glamor_create_pixmap(ScreenPtr screen,
                           int width, int height, int depth, unsigned int hint)
@@ -1105,12 +1087,6 @@ free:
     return glamor_create_pixmap(screen, width, height, depth, hint);
 }
 
-void
-glamor_egl_destroy_pixmap_image(PixmapPtr pixmap)
-{
-    /* XXX: Unused */
-}
-
 static Bool
 xmir_glamor_destroy_pixmap(PixmapPtr pixmap)
 {
