When the X server aborts with a signal, also re-raise that signal.  This
allows crash handlers like apport a chance to listen for and act on the
signal appropriately.  Apport uses this to capture a backtrace and post
a bug report.

Signed-off-by: Bryce Harrington <bryce@canonical.com>

diff --git a/hw/xfree86/common/xf86Events.c b/hw/xfree86/common/xf86Events.c
index 8cd765a..d2fb1a4 100644
--- a/hw/xfree86/common/xf86Events.c
+++ b/hw/xfree86/common/xf86Events.c
@@ -355,6 +355,8 @@ xf86InterceptSigIll(void (*sigillhandler)(void))
 int
 xf86SigWrapper(int signo)
 {
+  static Bool beenhere = FALSE;
+
   if ((signo == SIGILL) && xf86SigIllHandler) {
     (*xf86SigIllHandler)();
     return 0; /* continue */
@@ -377,6 +379,41 @@ void
 xf86PrintBacktrace(void)
 {
     xorg_backtrace();
+  switch (signo) {
+  case SIGSEGV:
+  case SIGBUS:
+  case SIGILL:
+  case SIGFPE:
+      signal(signo,SIG_DFL);
+      ErrorF ("Saw signal %d.  Server aborting.\n", signo);
+#ifdef DDXOSFATALERROR
+      if (!beenhere) {
+          OsVendorFatalError();
+      }
+#endif
+#ifdef ABORTONFATALERROR
+      abort();
+#endif
+      if (!beenhere) {
+          beenhere = TRUE;
+          OsCleanup(TRUE);
+          CloseDownDevices();
+          SigAbortDDX(signo);
+          fflush(stderr);
+          if (CoreDump) {
+              if (signo != 0)
+                  raise(signo);
+              else
+                  abort();
+          }
+          /*exit (1);*/
+
+      } else {
+          abort();
+      }
+      return;
+  }
+
 }
 
 #define KeyPressed(k) (keyc->postdown[k >> 3] & (1 << (k & 7)))
diff --git a/hw/xfree86/common/xf86Init.c b/hw/xfree86/common/xf86Init.c
index d3de670..dc3eff5 100644
--- a/hw/xfree86/common/xf86Init.c
+++ b/hw/xfree86/common/xf86Init.c
@@ -1174,14 +1174,17 @@ OsVendorInit(void)
 }
 
 /*
- * ddxGiveUp --
+ * ddxSigGiveUp --
  *      Device dependent cleanup. Called by by dix before normal server death.
  *      For SYSV386 we must switch the terminal back to normal mode. No error-
  *      checking here, since there should be restored as much as possible.
+ *
+ *      If a non-zero signo is passed, re-raise that signal rather than
+ *      calling abort().
  */
 
 void
-ddxGiveUp(void)
+ddxSigGiveUp(int signo)
 {
     int i;
 
@@ -1207,24 +1210,47 @@ ddxGiveUp(void)
 
     xf86CloseConsole();
 
+    ErrorF (" ddxSigGiveUp: Closing log\n");
     xf86CloseLog();
 
     /* If an unexpected signal was caught, dump a core for debugging */
-    if (xf86Info.caughtSignal)
-	abort();
+    if (xf86Info.caughtSignal) {
+        if (signo != 0) {
+            ErrorF (" ddxSigGiveUp: re-raising %d\n", signo);
+            raise(signo);
+        } else {
+            ErrorF (" ddxSigGiveUp: aborting\n");
+            abort();
+        }
+    }
 }
 
+/*
+ * ddxGiveUp --
+ *      Device dependent cleanup. Called by by dix before normal server death.
+ *      For SYSV386 we must switch the terminal back to normal mode. No error-
+ *      checking here, since there should be restored as much as possible.
+ */
+
+void
+ddxGiveUp()
+{
+    ddxSigGiveUp(0);
+}
 
 
 /*
- * AbortDDX --
+ * SigAbortDDX --
  *      DDX - specific abort routine.  Called by AbortServer(). The attempt is
  *      made to restore all original setting of the displays. Also all devices
  *      are closed.
+ *
+ *      If a non-zero signo is passed, re-raise that signal rather than calling
+ *      abort()
  */
 
 void
-AbortDDX(void)
+SigAbortDDX(int signo)
 {
   int i;
 
@@ -1255,7 +1281,20 @@ AbortDDX(void)
    * This is needed for an abnormal server exit, since the normal exit stuff
    * MUST also be performed (i.e. the vt must be left in a defined state)
    */
-  ddxGiveUp();
+  ddxSigGiveUp(signo);
+}
+
+/*
+ * AbortDDX --
+ *      DDX - specific abort routine.  The attempt is made to restore
+ *      all original setting of the displays. Also all devices are
+ *      closed.
+ */
+
+void
+AbortDDX()
+{
+    SigAbortDDX(0);
 }
 
 void
diff --git a/include/os.h b/include/os.h
index 2f6b0c0..d58be5e 100644
--- a/include/os.h
+++ b/include/os.h
@@ -434,7 +434,9 @@ typedef struct {
 /* stuff for FlushCallback */
 extern _X_EXPORT CallbackListPtr FlushCallback;
 
+extern _X_EXPORT void SigAbortDDX(int signo);
 extern _X_EXPORT void AbortDDX(void);
+extern _X_EXPORT void ddxSigGiveUp(int signo);
 extern _X_EXPORT void ddxGiveUp(void);
 extern _X_EXPORT int TimeSinceLastInputEvent(void);
 
