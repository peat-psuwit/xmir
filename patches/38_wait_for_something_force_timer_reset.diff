From upstream commits 8d3b465eb3d6c93cbbcebe8e5c9298caaaeb650b and
bb7a39ac13731a80fc2d80487f9da760dd34c3ba
Patch by Daniel Stone.

Index: xorg-server/os/WaitFor.c
===================================================================
--- xorg-server.orig/os/WaitFor.c	2006-09-18 17:25:50.000000000 -0400
+++ xorg-server/os/WaitFor.c	2006-12-12 20:35:45.000000000 -0500
@@ -128,11 +128,13 @@
 struct _OsTimerRec {
     OsTimerPtr		next;
     CARD32		expires;
+    CARD32              delta;
     OsTimerCallback	callback;
     pointer		arg;
 };
 
 static void DoTimer(OsTimerPtr timer, CARD32 now, OsTimerPtr *prev);
+static void CheckAllTimers(CARD32 now);
 static OsTimerPtr timers = NULL;
 
 /*****************
@@ -209,6 +211,12 @@
         {
             now = GetTimeInMillis();
 	    timeout = timers->expires - now;
+            if (timeout > 0 && timeout > timers->delta + 250) {
+                /* time has rewound.  reset the timers. */
+                CheckAllTimers(now);
+                timeout = timers->expires - now;
+            }
+
             if (timeout < 0)
                 timeout = 0;
 	    waittime.tv_sec = timeout / MILLI_PER_SECOND;
@@ -447,6 +455,21 @@
 }
 #endif
 
+/* If time has rewound, re-run every affected timer.
+ * Timers might drop out of the list, so we have to restart every time. */
+static void
+CheckAllTimers(CARD32 now)
+{
+    OsTimerPtr timer;
+
+start:
+    for (timer = timers; timer; timer = timer->next) {
+        if (timer->expires - now > timer->delta + 250) {
+            TimerForce(timer);
+            goto start;
+        }
+    }
+}
 
 static void
 DoTimer(OsTimerPtr timer, CARD32 now, OsTimerPtr *prev)
@@ -488,8 +511,13 @@
     }
     if (!millis)
 	return timer;
-    if (!(flags & TimerAbsolute))
+    if (flags & TimerAbsolute) {
+        timer->delta = millis - now;
+    }
+    else {
+        timer->delta = millis;
 	millis += now;
+    }
     timer->expires = millis;
     timer->callback = func;
     timer->arg = arg;
@@ -503,7 +531,7 @@
     for (prev = &timers;
 	 *prev && (int) ((*prev)->expires - millis) <= 0;
 	 prev = &(*prev)->next)
-	;
+        ;
     timer->next = *prev;
     *prev = timer;
     return timer;
